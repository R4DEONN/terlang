minus (1, 1) -
bracket (1, 3) (
minus (1, 5) -
number (1, 7) 5
minus (1, 9) -
number (1, 11) 5
plus (1, 13) +
number (1, 15) 5
bracket (1, 16) )
minus (1, 18) -
number (1, 20) 5
multiplication (1, 22) *
number (1, 24) -5.0e+20
minus (2, 1) -
plus (2, 4) +
number (2, 6) 5.3E-15
multiplication (2, 14) *
bracket (2, 16) (
minus (2, 17) -
plus (2, 20) +
minus (2, 22) -
multiplication (2, 25) *
bracket (2, 27) (
identifier (2, 28) a
multiplication (2, 30) *
minus (2, 32) -
bracket (2, 34) )
minus (2, 36) -
bracket (2, 38) )
logical (2, 40) !=
identifier (2, 43) abc
minus (3, 1) -
bracket (3, 3) (
minus (3, 5) -
number (3, 7) 5
minus (3, 9) -
number (3, 11) 5
plus (3, 13) +
number (3, 15) 5
bracket (3, 16) )
minus (3, 18) -
number (3, 20) 5
multiplication (3, 22) *
number (3, 24) -5.0e+20
identifier (4, 1) f
bracket (4, 2) (
identifier (4, 3) a
separator (4, 4) ,
identifier (4, 6) b
bracket (4, 7) )
identifier (5, 1) a.a
minus (6, 1) -
plus (6, 4) +
number (6, 6) 5.3E-15
variable_declaration (8, 1) let
identifier (8, 5) jgf
assignment (8, 5) =
separator (8, 11) ;
identifier (9, 1) a123
identifier (9, 6) a_
identifier (9, 9) a_123
error (10, 1) a@123
error (11, 1) 1a
error (12, 1) @a
variable_declaration (13, 1) const
identifier (13, 7) str
assignment (13, 11) =
string (13, 13) "ыфваваыф"
separator (13, 31) ;
identifier (14, 1) id.id.id
number (16, 1) 123
number (17, 1) 0.123
number (18, 1) .123
number (19, 1) 25.25
number (20, 1) 25.25e-25
error (21, 1) 1a
identifier (22, 1) опа
identifier (22, 8) пr
identifier (22, 12) zя
number (23, 1) 1.
number (24, 1) .1
number (25, 1) .0
number (26, 1) .123e+5
error (27, 5) .e+5
number (28, 1) 0.e-25
error (29, 1) 123455678901234556789012345567890123455678901234556789015710934751340958713450983147590814375091387
error (30, 1) 25.25.25
string (32, 1) "123"
string (33, 1) "123123"
if_statement (37, 1) if
bracket (37, 4) (
identifier (37, 5) str
assignment (37, 9) =
string (37, 11) "123"
bracket (37, 16) )
curly_bracket (38, 1) {
return (39, 5) return
number (39, 12) 420
separator (39, 15) ;
curly_bracket (41, 1) }
else_block (42, 1) else
return (42, 6) return
number (42, 13) 69
separator (42, 15) ;
